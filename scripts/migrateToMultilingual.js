// scripts/migrateToMultilingual.js
// –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∫ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...\n');

// –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–π phrases.ts
const oldPhrasesPath = path.join(__dirname, '../src/data/phrases.ts');
console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${oldPhrasesPath}`);
const oldContent = fs.readFileSync(oldPhrasesPath, 'utf8');

// Regex –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—Ä–∞–∑ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π subcategoryId)
const phraseRegex = /{\s*id:\s*["']([^"']+)["'][,\s]*categoryId:\s*["']([^"']+)["'][,\s]*(?:subcategoryId:\s*["']([^"']+)["'][,\s]*)?chinese:\s*["']([^"']+)["'][,\s]*pinyin:\s*["']([^"']+)["'][,\s]*russian:\s*["']([^"']+)["'][,\s]*turkmen:\s*["']([^"']+)["'][,\s]*audioFileTurkmen:\s*["']([^"']+)["'][,\s]*}/g;

const phrases = [];
let match;
let order = 1;

while ((match = phraseRegex.exec(oldContent)) !== null) {
  phrases.push({
    id: match[1],
    categoryId: match[2],
    subcategoryId: match[3] || undefined,
    chinese: match[4].replace(/\\/g, '\\\\'),  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª—ç—à–∏
    pinyin: match[5].replace(/\\/g, '\\\\'),
    russian: match[6].replace(/\\/g, '\\\\'),
    turkmen: match[7].replace(/\\/g, '\\\\'),
    audioFileTurkmen: match[8],
    order: order++
  });
}

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${phrases.length} —Ñ—Ä–∞–∑\n`);

if (phrases.length === 0) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç phrases.ts');
  process.exit(1);
}

// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const baseDir = path.join(__dirname, '../src/data/languages');
const translationsDir = path.join(baseDir, 'translations');

console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
[baseDir, translationsDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`   ‚úÖ ${dir}`);
  } else {
    console.log(`   ‚è≠Ô∏è  ${dir} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
  }
});

// 1. –°–æ–∑–¥–∞—ë–º base.ts
console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ base.ts...');
const baseContent = `// AUTO-GENERATED: –ë–∞–∑–æ–≤—ã–µ —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
// Generated: ${new Date().toISOString()}
// Total phrases: ${phrases.length}
import { BasePhrase } from '../../types';

export const basePhrases: BasePhrase[] = [
${phrases.map(p => {
  const subcategoryLine = p.subcategoryId ? `\n    subcategoryId: "${p.subcategoryId}",` : '';
  return `  {
    id: "${p.id}",
    categoryId: "${p.categoryId}",${subcategoryLine}
    turkmen: "${p.turkmen}",
    audioFileTurkmen: "${p.audioFileTurkmen}",
    order: ${p.order}
  }`;
}).join(',\n')}
];
`;

fs.writeFileSync(path.join(baseDir, 'base.ts'), baseContent);
console.log('‚úÖ base.ts —Å–æ–∑–¥–∞–Ω');

// 2. –°–æ–∑–¥–∞—ë–º chinese.ts
console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ chinese.ts...');
const chineseContent = `// AUTO-GENERATED: –ö–∏—Ç–∞–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
// Generated: ${new Date().toISOString()}
// Total translations: ${phrases.length}
import { LanguageTranslation } from '../../../types';

export const chineseTranslations: LanguageTranslation[] = [
${phrases.map(p => `  {
    phraseId: "${p.id}",
    text: "${p.chinese}",
    transcription: "${p.pinyin}"
  }`).join(',\n')}
];
`;

fs.writeFileSync(path.join(translationsDir, 'chinese.ts'), chineseContent);
console.log('‚úÖ chinese.ts —Å–æ–∑–¥–∞–Ω');

// 3. –°–æ–∑–¥–∞—ë–º russian.ts
console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ russian.ts...');
const russianContent = `// AUTO-GENERATED: –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
// Generated: ${new Date().toISOString()}
// Total translations: ${phrases.length}
import { LanguageTranslation } from '../../../types';

export const russianTranslations: LanguageTranslation[] = [
${phrases.map(p => `  {
    phraseId: "${p.id}",
    text: "${p.russian}",
    transcription: undefined
  }`).join(',\n')}
];
`;

fs.writeFileSync(path.join(translationsDir, 'russian.ts'), russianContent);
console.log('‚úÖ russian.ts —Å–æ–∑–¥–∞–Ω');

// 4. –°–æ–∑–¥–∞—ë–º english.ts (–ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω)
console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ english.ts...');
const englishContent = `// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
// TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö ${phrases.length} —Ñ—Ä–∞–∑
import { LanguageTranslation } from '../../../types';

export const englishTranslations: LanguageTranslation[] = [
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
  // –ü—Ä–∏–º–µ—Ä:
  // {
  //   phraseId: "phrase_001",
  //   text: "Hello",
  //   transcription: undefined
  // },
];
`;

fs.writeFileSync(path.join(translationsDir, 'english.ts'), englishContent);
console.log('‚úÖ english.ts —Å–æ–∑–¥–∞–Ω (–ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω)');

// 5. –°–æ–∑–¥–∞—ë–º index.ts
console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ index.ts...');
const indexContent = `// AUTO-GENERATED: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
// Generated: ${new Date().toISOString()}
import { chineseTranslations } from './translations/chinese';
import { russianTranslations } from './translations/russian';
import { englishTranslations } from './translations/english';
import { LanguageTranslation } from '../../types';

const translationsMap: Record<string, LanguageTranslation[]> = {
  zh: chineseTranslations,
  ru: russianTranslations,
  en: englishTranslations,
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
 * @param languageCode - –ö–æ–¥ —è–∑—ã–∫–∞ (zh, ru, en...)
 * @returns –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
 */
export const getTranslationsForLanguage = (
  languageCode: string
): LanguageTranslation[] => {
  return translationsMap[languageCode] || [];
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞
 * @param languageCode - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns true –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –µ—Å—Ç—å
 */
export const hasTranslationsForLanguage = (
  languageCode: string
): boolean => {
  const translations = translationsMap[languageCode];
  return translations && translations.length > 0;
};
`;

fs.writeFileSync(path.join(baseDir, 'index.ts'), indexContent);
console.log('‚úÖ index.ts —Å–æ–∑–¥–∞–Ω');

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(50));
console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n');
console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`   –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: ${phrases.length}`);
console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${new Set(phrases.map(p => p.categoryId)).size}`);
console.log(`   –° –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${phrases.filter(p => p.subcategoryId).length}`);
console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
console.log('   ‚úÖ src/data/languages/base.ts');
console.log('   ‚úÖ src/data/languages/translations/chinese.ts');
console.log('   ‚úÖ src/data/languages/translations/russian.ts');
console.log('   ‚úÖ src/data/languages/translations/english.ts (—à–∞–±–ª–æ–Ω)');
console.log('   ‚úÖ src/data/languages/index.ts');
console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('   1. –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ english.ts');
console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é: npm run type-check');
console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç: import { basePhrases } from "src/data/languages/base"');
console.log('='.repeat(50));
