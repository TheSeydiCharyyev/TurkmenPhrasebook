// scripts/generateEnglishTranslations.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—É—Å—Å–∫–∏—Ö
const fs = require('fs');
const path = require('path');

console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');

// –ß–∏—Ç–∞–µ–º phrases.ts
const phrasesPath = path.join(__dirname, '../src/data/phrases.ts');
const phrasesContent = fs.readFileSync(phrasesPath, 'utf8');

// –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π)
const translationMap = {
  '–ü—Ä–∏–≤–µ—Ç': 'Hello',
  '–°–ø–∞—Å–∏–±–æ': 'Thank you',
  '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è': 'Goodbye',
  '–ò–∑–≤–∏–Ω–∏—Ç–µ': 'Excuse me',
  '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ': 'Good morning',
  '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏': 'Good night',
  '–î–∞': 'Yes',
  '–ù–µ—Ç': 'No',
  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞': 'Please',
  '–ü–æ–º–æ–≥–∏—Ç–µ': 'Help',
  '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é': 'I don\'t understand',
  '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?': 'How much does it cost?',
  '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è...?': 'Where is...?',
  '–ö–∞–∫ –¥–µ–ª–∞?': 'How are you?',
  '–•–æ—Ä–æ—à–æ': 'Good',
  '–ü–ª–æ—Ö–æ': 'Bad',
  '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ': 'Very good',
};

// Regex –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
const russianRegex = /russian:\s*["']([^"']+)["']/g;

const russianPhrases = [];
let match;

while ((match = russianRegex.exec(phrasesContent)) !== null) {
  russianPhrases.push(match[1]);
}

console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${russianPhrases.length} —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑\n`);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
const englishTranslations = russianPhrases.map((russian, index) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ TODO
  const english = translationMap[russian] || `[TODO: ${russian}]`;

  return {
    phraseId: `phrase_${String(index + 1).padStart(3, '0')}`,
    text: english,
    transcription: undefined
  };
});

// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
const fileContent = `// AUTO-GENERATED: –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
// Generated: ${new Date().toISOString()}
// Total translations: ${englishTranslations.length}
// NOTE: –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ [TODO:...] —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
import { LanguageTranslation } from '../../../types';

export const englishTranslations: LanguageTranslation[] = [
${englishTranslations.map(t => `  {
    phraseId: "${t.phraseId}",
    text: "${t.text}",
    transcription: undefined
  }`).join(',\n')}
];
`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
const outputPath = path.join(__dirname, '../src/data/languages/translations/english.ts');
fs.writeFileSync(outputPath, fileContent, 'utf8');

console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${outputPath}`);
console.log(`üìä –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${englishTranslations.length}`);

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const todoCount = englishTranslations.filter(t => t.text.startsWith('[TODO:')).length;
const readyCount = englishTranslations.length - todoCount;

console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
console.log(`  ‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${readyCount}`);
console.log(`  ‚è≥ –¢—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: ${todoCount}`);
console.log(`\nüí° –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ [TODO:...] –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤—Ä—É—á–Ω—É—é`);
console.log(`   –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.\n`);
