// src/screens/HomeScreen.tsx - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ (Phase 3)

import React, { useCallback, useRef, useMemo, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Animated,
  TextInput,
  TouchableOpacity,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { Ionicons } from '@expo/vector-icons';

import { Category, HomeStackParamList } from '../types';
import { Colors } from '../constants/Colors';
import { useAppLanguage } from '../contexts/LanguageContext';
import { useConfig } from '../contexts/ConfigContext';
import { getLanguageByCode } from '../config/languages.config';
import { categories } from '../data/categories';
import CategoryCard from '../components/CategoryCard';
import ErrorBoundary from '../components/ErrorBoundary';
import { TabScreen } from '../components/Screen';

type HomeScreenNavigationProp = StackNavigationProp<HomeStackParamList, 'CategoryScreen'>;

// –í—ã—Å–æ—Ç–∞ –Ω–æ–≤–æ–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —à–∞–ø–∫–∏
const HEADER_HEIGHT = 120;

// –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —à–∞–ø–∫–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —è–∑—ã–∫–∞
const MinimalHeader = React.memo<{
  languageMode: 'ru' | 'tk' | 'zh' | 'en';  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
  onSearchPress: () => void;
  onLanguagePress: () => void;
  selectedLanguageCode: string;
}>(
  ({ languageMode, onSearchPress, onLanguagePress, selectedLanguageCode }) => {
    const selectedLang = getLanguageByCode(selectedLanguageCode);
    const turkmenFlag = 'üáπüá≤';

    return (
      <View style={styles.headerContainer}>
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —è–∑—ã–∫–∞ */}
        <View style={styles.languageHeader}>
          <View style={styles.languageIndicator}>
            <Text style={styles.flagLarge}>{selectedLang?.flag || 'üåç'}</Text>
            <Text style={styles.languageCode}>{selectedLang?.name || 'Language'}</Text>
          </View>

          <Ionicons name="swap-horizontal" size={24} color="#6B7280" />

          <View style={styles.languageIndicator}>
            <Text style={styles.flagLarge}>{turkmenFlag}</Text>
            <Text style={styles.languageCode}>T√ºrkmen</Text>
          </View>

          <TouchableOpacity
            style={styles.changeLanguageButton}
            onPress={onLanguagePress}
          >
            <Ionicons name="settings-outline" size={20} color="#6B7280" />
          </TouchableOpacity>
        </View>

        {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ */}
        <View style={styles.titleContainer}>
          <Text style={styles.titleTurkmen}>Kategori√Ωany sa√Ωla≈à</Text>
          {languageMode === 'en' ? (
            // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –≤—ã–±—Ä–∞–Ω: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–º–µ—Å—Ç–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ
            <Text style={styles.titleChinese}>Select a category</Text>
          ) : (
            // –ö–∏—Ç–∞–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–π
            <Text style={styles.titleChinese}>ÈÄâÊã©Á±ªÂà´</Text>
          )}
          <Text style={styles.titleRussian}>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</Text>
        </View>

        {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
        <TouchableOpacity
          style={styles.searchBar}
          onPress={onSearchPress}
          activeOpacity={0.7}
        >
          <Ionicons name="search" size={20} color={Colors.textLight} />
          <Text style={styles.searchPlaceholder}>
            {languageMode === 'zh' ? 'ÊêúÁ¥¢Áü≠ËØ≠...' :
             languageMode === 'tk' ? 'S√∂zlemleri g√∂zle...' :
             languageMode === 'en' ? 'Search phrases...' :  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
             '–ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑...'}
          </Text>
        </TouchableOpacity>
      </View>
    );
  }
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CategoryPairItem = React.memo<{
  item: [Category, Category | undefined];
  onPress: (category: Category) => void;
  languageMode: 'ru' | 'tk' | 'zh' | 'en';  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
}>(({ item, onPress, languageMode }) => (
  <View style={styles.row}>
    <View style={[styles.cardWrapper, styles.leftCard]}>
      <CategoryCard
        category={item[0]}
        onPress={onPress}
        languageMode={languageMode}
      />
    </View>
    {item[1] && (
      <View style={[styles.cardWrapper, styles.rightCard]}>
        <CategoryCard
          category={item[1]}
          onPress={onPress}
          languageMode={languageMode}
        />
      </View>
    )}
  </View>
));

// –°–µ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
interface CategoryGridProps {
  languageMode: 'ru' | 'tk' | 'zh' | 'en';  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
}

const CategoryGrid = React.memo<CategoryGridProps>(({ languageMode }) => {
  const navigation = useNavigation<HomeScreenNavigationProp>();

  const handleCategoryPress = useCallback((category: Category) => {
    navigation.navigate('CategoryScreen', { category });
  }, [navigation]);

  const renderCategoryPair = useCallback(
    ({ item }: { item: [Category, Category | undefined] }) => (
      <CategoryPairItem
        item={item}
        onPress={handleCategoryPress}
        languageMode={languageMode}
      />
    ),
    [handleCategoryPress, languageMode]
  );

  const categoryPairs = useMemo(() => {
    const pairs: [Category, Category | undefined][] = [];
    for (let i = 0; i < categories.length; i += 2) {
      pairs.push([categories[i], categories[i + 1]]);
    }
    return pairs;
  }, []);

  return (
    <FlatList
      data={categoryPairs}
      renderItem={renderCategoryPair}
      keyExtractor={(item, index) => `pair-${index}`}
      contentContainerStyle={styles.gridContainer}
      showsVerticalScrollIndicator={false}
      removeClippedSubviews={true}
      maxToRenderPerBatch={6}
      windowSize={10}
      initialNumToRender={4}
    />
  );
});

export default function HomeScreen() {
  const { config } = useAppLanguage();
  const { selectedLanguage } = useConfig();
  const navigation = useNavigation<any>();

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ú–∞–ø–ø–∏–Ω–≥ selectedLanguage –¥–ª—è languageMode
  const languageMode: 'ru' | 'tk' | 'zh' | 'en' =
    selectedLanguage === 'zh' ? 'zh' :
    selectedLanguage === 'ru' ? 'ru' :
    selectedLanguage === 'en' ? 'en' :
    'tk';  // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π

  const handleSearchPress = useCallback(() => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–∏—Å–∫–∞
    navigation.navigate('AdditionalFeatures', {
      screen: 'Search'
    });
  }, [navigation]);

  const handleLanguagePress = useCallback(() => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∏–∫–∞
    navigation.navigate('LanguagePairSelection');
  }, [navigation]);

  return (
    <ErrorBoundary>
      <TabScreen backgroundColor={Colors.background}>
        {/* –ù–û–í–ê–Ø –ú–ò–ù–ò–ú–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –®–ê–ü–ö–ê –° –ò–ù–î–ò–ö–ê–¢–û–†–û–ú –Ø–ó–´–ö–ê */}
        <MinimalHeader
          languageMode={languageMode}  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º languageMode
          onSearchPress={handleSearchPress}
          onLanguagePress={handleLanguagePress}
          selectedLanguageCode={selectedLanguage}
        />

        {/* –ö–ê–¢–ï–ì–û–†–ò–ò - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô */}
        <View style={styles.contentContainer}>
          <CategoryGrid languageMode={languageMode} />  {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º languageMode */}
        </View>
      </TabScreen>
    </ErrorBoundary>
  );
}

const styles = StyleSheet.create({
  // –ù–û–í–ê–Ø –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —à–∞–ø–∫–∞
  headerContainer: {
    backgroundColor: Colors.background,
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border || '#E5E7EB',
  },

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —è–∑—ã–∫–∞
  languageHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  languageIndicator: {
    alignItems: 'center',
    marginHorizontal: 12,
  },
  flagLarge: {
    fontSize: 28,
  },
  languageCode: {
    fontSize: 11,
    color: '#6B7280',
    marginTop: 4,
    fontWeight: '500',
  },
  changeLanguageButton: {
    position: 'absolute',
    right: 12,
    padding: 8,
  },

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  titleContainer: {
    alignItems: 'center',
    marginBottom: 12,
  },

  // –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  titleTurkmen: {
    fontSize: 18,
    fontWeight: '600',
    color: Colors.text,
    marginBottom: 4,
  },

  // –ö–∏—Ç–∞–π—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  titleChinese: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.textSecondary || '#6B7280',
    marginBottom: 4,
  },

  // –†—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  titleRussian: {
    fontSize: 14,
    fontWeight: '400',
    color: Colors.textLight,
  },

  // –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.backgroundLight || '#F9FAFB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderWidth: 1,
    borderColor: Colors.border || '#E5E7EB',
  },

  searchPlaceholder: {
    marginLeft: 10,
    fontSize: 15,
    color: Colors.textLight,
  },

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  contentContainer: {
    flex: 1,
    backgroundColor: Colors.background,
  },

  gridContainer: {
    paddingHorizontal: 24,
    paddingVertical: 20,
    paddingBottom: 40,
  },

  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },

  cardWrapper: {
    width: '48%',
  },

  leftCard: {
    marginRight: 8,
  },

  rightCard: {
    marginLeft: 8,
  },
});